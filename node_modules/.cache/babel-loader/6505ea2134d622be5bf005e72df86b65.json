{"ast":null,"code":"import React from 'react';\nconst {\n  useCallback,\n  useEffect,\n  useState,\n  useRef\n} = React;\nexport const useDebounceCallback = (callback, wait = 100, leading = false) => {\n  const timeout = useRef(void 0);\n  const deps = [callback, wait, leading]; // Cleans up pending timeouts when the deps change\n\n  function _ref() {\n    clearTimeout(timeout.current);\n    timeout.current = void 0;\n  }\n\n  useEffect(() => _ref, deps);\n\n  function _ref2() {\n    timeout.current = void 0;\n  }\n\n  return useCallback(function () {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this; // eslint-disable-next-line prefer-rest-params\n\n    const args = arguments;\n    const current = timeout.current; // Calls on leading edge\n\n    if (current === void 0 && leading) {\n      timeout.current = setTimeout(_ref2, wait);\n      return callback.apply(self, args);\n    } // Clear the timeout every call and start waiting again\n\n\n    clearTimeout(current); // Waits for `wait` before invoking the callback\n\n    timeout.current = setTimeout(() => {\n      timeout.current = void 0;\n      callback.apply(self, args);\n    }, wait);\n  }, deps);\n};\nexport const useDebounce = (initialState, wait, leading) => {\n  const _ref_0 = useState(initialState);\n\n  const setState = _ref_0[1];\n  const state = _ref_0[0];\n  return [state, useDebounceCallback(setState, wait, leading)];\n};\nexport default useDebounce;","map":{"version":3,"sources":["C:/Users/Work/Desktop/Wild Code School/Projects/art-gallery-react-project2/bucharest-project2-art-gallery/node_modules/@react-hook/debounce/dist/module/index.js"],"names":["React","useCallback","useEffect","useState","useRef","useDebounceCallback","callback","wait","leading","timeout","deps","_ref","clearTimeout","current","_ref2","self","args","arguments","setTimeout","apply","useDebounce","initialState","_ref_0","setState","state"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAM;AAACC,EAAAA,WAAD;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA,QAAzB;AAAmCC,EAAAA;AAAnC,IAA6CJ,KAAnD;AACA,OAAO,MAAMK,mBAAmB,GAAG,CAACC,QAAD,EAAWC,IAAI,GAAG,GAAlB,EAAuBC,OAAO,GAAG,KAAjC,KAA2C;AAC5E,QAAMC,OAAO,GAAGL,MAAM,CAAC,KAAK,CAAN,CAAtB;AACA,QAAMM,IAAI,GAAG,CAACJ,QAAD,EAAWC,IAAX,EAAiBC,OAAjB,CAAb,CAF4E,CAErC;;AAEvC,WAASG,IAAT,GAAgB;AACdC,IAAAA,YAAY,CAACH,OAAO,CAACI,OAAT,CAAZ;AACAJ,IAAAA,OAAO,CAACI,OAAR,GAAkB,KAAK,CAAvB;AACD;;AAEDX,EAAAA,SAAS,CAAC,MAAMS,IAAP,EAAaD,IAAb,CAAT;;AAEA,WAASI,KAAT,GAAiB;AACfL,IAAAA,OAAO,CAACI,OAAR,GAAkB,KAAK,CAAvB;AACD;;AAED,SAAOZ,WAAW,CAAC,YAAY;AAC7B;AACA,UAAMc,IAAI,GAAG,IAAb,CAF6B,CAEX;;AAElB,UAAMC,IAAI,GAAGC,SAAb;AACA,UAAMJ,OAAO,GAAGJ,OAAO,CAACI,OAAxB,CAL6B,CAKG;;AAEhC,QAAIA,OAAO,KAAK,KAAK,CAAjB,IAAsBL,OAA1B,EAAmC;AACjCC,MAAAA,OAAO,CAACI,OAAR,GAAkBK,UAAU,CAACJ,KAAD,EAAQP,IAAR,CAA5B;AACA,aAAOD,QAAQ,CAACa,KAAT,CAAeJ,IAAf,EAAqBC,IAArB,CAAP;AACD,KAV4B,CAU3B;;;AAEFJ,IAAAA,YAAY,CAACC,OAAD,CAAZ,CAZ6B,CAYP;;AAEtBJ,IAAAA,OAAO,CAACI,OAAR,GAAkBK,UAAU,CAAC,MAAM;AACjCT,MAAAA,OAAO,CAACI,OAAR,GAAkB,KAAK,CAAvB;AACAP,MAAAA,QAAQ,CAACa,KAAT,CAAeJ,IAAf,EAAqBC,IAArB;AACD,KAH2B,EAGzBT,IAHyB,CAA5B;AAID,GAlBiB,EAkBfG,IAlBe,CAAlB;AAmBD,CAlCM;AAmCP,OAAO,MAAMU,WAAW,GAAG,CAACC,YAAD,EAAed,IAAf,EAAqBC,OAArB,KAAiC;AAC1D,QAAMc,MAAM,GAAGnB,QAAQ,CAACkB,YAAD,CAAvB;;AAEA,QAAME,QAAQ,GAAGD,MAAM,CAAC,CAAD,CAAvB;AACA,QAAME,KAAK,GAAGF,MAAM,CAAC,CAAD,CAApB;AACA,SAAO,CAACE,KAAD,EAAQnB,mBAAmB,CAACkB,QAAD,EAAWhB,IAAX,EAAiBC,OAAjB,CAA3B,CAAP;AACD,CANM;AAOP,eAAeY,WAAf","sourcesContent":["import React from 'react'\nconst {useCallback, useEffect, useState, useRef} = React\nexport const useDebounceCallback = (callback, wait = 100, leading = false) => {\n  const timeout = useRef(void 0)\n  const deps = [callback, wait, leading] // Cleans up pending timeouts when the deps change\n\n  function _ref() {\n    clearTimeout(timeout.current)\n    timeout.current = void 0\n  }\n\n  useEffect(() => _ref, deps)\n\n  function _ref2() {\n    timeout.current = void 0\n  }\n\n  return useCallback(function () {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this // eslint-disable-next-line prefer-rest-params\n\n    const args = arguments\n    const current = timeout.current // Calls on leading edge\n\n    if (current === void 0 && leading) {\n      timeout.current = setTimeout(_ref2, wait)\n      return callback.apply(self, args)\n    } // Clear the timeout every call and start waiting again\n\n    clearTimeout(current) // Waits for `wait` before invoking the callback\n\n    timeout.current = setTimeout(() => {\n      timeout.current = void 0\n      callback.apply(self, args)\n    }, wait)\n  }, deps)\n}\nexport const useDebounce = (initialState, wait, leading) => {\n  const _ref_0 = useState(initialState)\n\n  const setState = _ref_0[1]\n  const state = _ref_0[0]\n  return [state, useDebounceCallback(setState, wait, leading)]\n}\nexport default useDebounce\n"]},"metadata":{},"sourceType":"module"}